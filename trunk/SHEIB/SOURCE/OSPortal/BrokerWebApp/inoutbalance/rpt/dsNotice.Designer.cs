//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BrokerWebApp.inoutbalance.rpt {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsNotice")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsNotice : global::System.Data.DataSet {
        
        private NoticeDataTable tableNotice;
        
        private NoticePolicyDataTable tableNoticePolicy;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsNotice() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsNotice(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Notice"] != null)) {
                    base.Tables.Add(new NoticeDataTable(ds.Tables["Notice"]));
                }
                if ((ds.Tables["NoticePolicy"] != null)) {
                    base.Tables.Add(new NoticePolicyDataTable(ds.Tables["NoticePolicy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NoticeDataTable Notice {
            get {
                return this.tableNotice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NoticePolicyDataTable NoticePolicy {
            get {
                return this.tableNoticePolicy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsNotice cln = ((dsNotice)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Notice"] != null)) {
                    base.Tables.Add(new NoticeDataTable(ds.Tables["Notice"]));
                }
                if ((ds.Tables["NoticePolicy"] != null)) {
                    base.Tables.Add(new NoticePolicyDataTable(ds.Tables["NoticePolicy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableNotice = ((NoticeDataTable)(base.Tables["Notice"]));
            if ((initTable == true)) {
                if ((this.tableNotice != null)) {
                    this.tableNotice.InitVars();
                }
            }
            this.tableNoticePolicy = ((NoticePolicyDataTable)(base.Tables["NoticePolicy"]));
            if ((initTable == true)) {
                if ((this.tableNoticePolicy != null)) {
                    this.tableNoticePolicy.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsNotice";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsNotice.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableNotice = new NoticeDataTable();
            base.Tables.Add(this.tableNotice);
            this.tableNoticePolicy = new NoticePolicyDataTable();
            base.Tables.Add(this.tableNoticePolicy);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNotice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNoticePolicy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsNotice ds = new dsNotice();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void NoticeRowChangeEventHandler(object sender, NoticeRowChangeEvent e);
        
        public delegate void NoticePolicyRowChangeEventHandler(object sender, NoticePolicyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NoticeDataTable : global::System.Data.TypedTableBase<NoticeRow> {
            
            private global::System.Data.DataColumn columnNoticeNo;
            
            private global::System.Data.DataColumn columnNoticeDate;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnPayFee;
            
            private global::System.Data.DataColumn columnPayFeeUpper;
            
            private global::System.Data.DataColumn columnAciPremium;
            
            private global::System.Data.DataColumn columnCstPremium;
            
            private global::System.Data.DataColumn columnCiPremium;
            
            private global::System.Data.DataColumn columnFeeCompany;
            
            private global::System.Data.DataColumn columnFeeAccount;
            
            private global::System.Data.DataColumn columnFeeBankName;
            
            private global::System.Data.DataColumn columnContent;
            
            private global::System.Data.DataColumn columnSalesName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticeDataTable() {
                this.TableName = "Notice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoticeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NoticeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoticeNoColumn {
                get {
                    return this.columnNoticeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoticeDateColumn {
                get {
                    return this.columnNoticeDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayFeeColumn {
                get {
                    return this.columnPayFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayFeeUpperColumn {
                get {
                    return this.columnPayFeeUpper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AciPremiumColumn {
                get {
                    return this.columnAciPremium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CstPremiumColumn {
                get {
                    return this.columnCstPremium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CiPremiumColumn {
                get {
                    return this.columnCiPremium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeCompanyColumn {
                get {
                    return this.columnFeeCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeAccountColumn {
                get {
                    return this.columnFeeAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeBankNameColumn {
                get {
                    return this.columnFeeBankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContentColumn {
                get {
                    return this.columnContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesNameColumn {
                get {
                    return this.columnSalesName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticeRow this[int index] {
                get {
                    return ((NoticeRow)(this.Rows[index]));
                }
            }
            
            public event NoticeRowChangeEventHandler NoticeRowChanging;
            
            public event NoticeRowChangeEventHandler NoticeRowChanged;
            
            public event NoticeRowChangeEventHandler NoticeRowDeleting;
            
            public event NoticeRowChangeEventHandler NoticeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNoticeRow(NoticeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticeRow AddNoticeRow(string NoticeNo, string NoticeDate, string CustomerName, string PayFee, string PayFeeUpper, string AciPremium, string CstPremium, string CiPremium, string FeeCompany, string FeeAccount, string FeeBankName, string Content, string SalesName) {
                NoticeRow rowNoticeRow = ((NoticeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NoticeNo,
                        NoticeDate,
                        CustomerName,
                        PayFee,
                        PayFeeUpper,
                        AciPremium,
                        CstPremium,
                        CiPremium,
                        FeeCompany,
                        FeeAccount,
                        FeeBankName,
                        Content,
                        SalesName};
                rowNoticeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNoticeRow);
                return rowNoticeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NoticeDataTable cln = ((NoticeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NoticeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNoticeNo = base.Columns["NoticeNo"];
                this.columnNoticeDate = base.Columns["NoticeDate"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnPayFee = base.Columns["PayFee"];
                this.columnPayFeeUpper = base.Columns["PayFeeUpper"];
                this.columnAciPremium = base.Columns["AciPremium"];
                this.columnCstPremium = base.Columns["CstPremium"];
                this.columnCiPremium = base.Columns["CiPremium"];
                this.columnFeeCompany = base.Columns["FeeCompany"];
                this.columnFeeAccount = base.Columns["FeeAccount"];
                this.columnFeeBankName = base.Columns["FeeBankName"];
                this.columnContent = base.Columns["Content"];
                this.columnSalesName = base.Columns["SalesName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNoticeNo = new global::System.Data.DataColumn("NoticeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoticeNo);
                this.columnNoticeDate = new global::System.Data.DataColumn("NoticeDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoticeDate);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnPayFee = new global::System.Data.DataColumn("PayFee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayFee);
                this.columnPayFeeUpper = new global::System.Data.DataColumn("PayFeeUpper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayFeeUpper);
                this.columnAciPremium = new global::System.Data.DataColumn("AciPremium", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAciPremium);
                this.columnCstPremium = new global::System.Data.DataColumn("CstPremium", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCstPremium);
                this.columnCiPremium = new global::System.Data.DataColumn("CiPremium", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCiPremium);
                this.columnFeeCompany = new global::System.Data.DataColumn("FeeCompany", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeCompany);
                this.columnFeeAccount = new global::System.Data.DataColumn("FeeAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeAccount);
                this.columnFeeBankName = new global::System.Data.DataColumn("FeeBankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeBankName);
                this.columnContent = new global::System.Data.DataColumn("Content", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContent);
                this.columnSalesName = new global::System.Data.DataColumn("SalesName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticeRow NewNoticeRow() {
                return ((NoticeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NoticeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NoticeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NoticeRowChanged != null)) {
                    this.NoticeRowChanged(this, new NoticeRowChangeEvent(((NoticeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NoticeRowChanging != null)) {
                    this.NoticeRowChanging(this, new NoticeRowChangeEvent(((NoticeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NoticeRowDeleted != null)) {
                    this.NoticeRowDeleted(this, new NoticeRowChangeEvent(((NoticeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NoticeRowDeleting != null)) {
                    this.NoticeRowDeleting(this, new NoticeRowChangeEvent(((NoticeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNoticeRow(NoticeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsNotice ds = new dsNotice();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NoticeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NoticePolicyDataTable : global::System.Data.TypedTableBase<NoticePolicyRow> {
            
            private global::System.Data.DataColumn columnProdTypeName;
            
            private global::System.Data.DataColumn columnPolicyNo;
            
            private global::System.Data.DataColumn columnPolicyID;
            
            private global::System.Data.DataColumn columnPayFee;
            
            private global::System.Data.DataColumn columnNoticeNo;
            
            private global::System.Data.DataColumn columnCarrierName;
            
            private global::System.Data.DataColumn columnBranchName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticePolicyDataTable() {
                this.TableName = "NoticePolicy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoticePolicyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NoticePolicyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProdTypeNameColumn {
                get {
                    return this.columnProdTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PolicyNoColumn {
                get {
                    return this.columnPolicyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PolicyIDColumn {
                get {
                    return this.columnPolicyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayFeeColumn {
                get {
                    return this.columnPayFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoticeNoColumn {
                get {
                    return this.columnNoticeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarrierNameColumn {
                get {
                    return this.columnCarrierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchNameColumn {
                get {
                    return this.columnBranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticePolicyRow this[int index] {
                get {
                    return ((NoticePolicyRow)(this.Rows[index]));
                }
            }
            
            public event NoticePolicyRowChangeEventHandler NoticePolicyRowChanging;
            
            public event NoticePolicyRowChangeEventHandler NoticePolicyRowChanged;
            
            public event NoticePolicyRowChangeEventHandler NoticePolicyRowDeleting;
            
            public event NoticePolicyRowChangeEventHandler NoticePolicyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNoticePolicyRow(NoticePolicyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticePolicyRow AddNoticePolicyRow(string ProdTypeName, string PolicyNo, string PolicyID, string PayFee, string NoticeNo, string CarrierName, string BranchName) {
                NoticePolicyRow rowNoticePolicyRow = ((NoticePolicyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProdTypeName,
                        PolicyNo,
                        PolicyID,
                        PayFee,
                        NoticeNo,
                        CarrierName,
                        BranchName};
                rowNoticePolicyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNoticePolicyRow);
                return rowNoticePolicyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NoticePolicyDataTable cln = ((NoticePolicyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NoticePolicyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProdTypeName = base.Columns["ProdTypeName"];
                this.columnPolicyNo = base.Columns["PolicyNo"];
                this.columnPolicyID = base.Columns["PolicyID"];
                this.columnPayFee = base.Columns["PayFee"];
                this.columnNoticeNo = base.Columns["NoticeNo"];
                this.columnCarrierName = base.Columns["CarrierName"];
                this.columnBranchName = base.Columns["BranchName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProdTypeName = new global::System.Data.DataColumn("ProdTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProdTypeName);
                this.columnPolicyNo = new global::System.Data.DataColumn("PolicyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPolicyNo);
                this.columnPolicyID = new global::System.Data.DataColumn("PolicyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPolicyID);
                this.columnPayFee = new global::System.Data.DataColumn("PayFee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayFee);
                this.columnNoticeNo = new global::System.Data.DataColumn("NoticeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoticeNo);
                this.columnCarrierName = new global::System.Data.DataColumn("CarrierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrierName);
                this.columnBranchName = new global::System.Data.DataColumn("BranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchName);
                this.columnProdTypeName.Caption = "NoticeNo";
                this.columnPolicyNo.Caption = "NoticeDate";
                this.columnPolicyID.Caption = "CustomerName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticePolicyRow NewNoticePolicyRow() {
                return ((NoticePolicyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NoticePolicyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NoticePolicyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NoticePolicyRowChanged != null)) {
                    this.NoticePolicyRowChanged(this, new NoticePolicyRowChangeEvent(((NoticePolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NoticePolicyRowChanging != null)) {
                    this.NoticePolicyRowChanging(this, new NoticePolicyRowChangeEvent(((NoticePolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NoticePolicyRowDeleted != null)) {
                    this.NoticePolicyRowDeleted(this, new NoticePolicyRowChangeEvent(((NoticePolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NoticePolicyRowDeleting != null)) {
                    this.NoticePolicyRowDeleting(this, new NoticePolicyRowChangeEvent(((NoticePolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNoticePolicyRow(NoticePolicyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsNotice ds = new dsNotice();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NoticePolicyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NoticeRow : global::System.Data.DataRow {
            
            private NoticeDataTable tableNotice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoticeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNotice = ((NoticeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoticeNo {
                get {
                    try {
                        return ((string)(this[this.tableNotice.NoticeNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“NoticeNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.NoticeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoticeDate {
                get {
                    try {
                        return ((string)(this[this.tableNotice.NoticeDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“NoticeDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.NoticeDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableNotice.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayFee {
                get {
                    try {
                        return ((string)(this[this.tableNotice.PayFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“PayFee”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.PayFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayFeeUpper {
                get {
                    try {
                        return ((string)(this[this.tableNotice.PayFeeUpperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“PayFeeUpper”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.PayFeeUpperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AciPremium {
                get {
                    try {
                        return ((string)(this[this.tableNotice.AciPremiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“AciPremium”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.AciPremiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CstPremium {
                get {
                    try {
                        return ((string)(this[this.tableNotice.CstPremiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“CstPremium”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.CstPremiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CiPremium {
                get {
                    try {
                        return ((string)(this[this.tableNotice.CiPremiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“CiPremium”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.CiPremiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeeCompany {
                get {
                    try {
                        return ((string)(this[this.tableNotice.FeeCompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“FeeCompany”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.FeeCompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeeAccount {
                get {
                    try {
                        return ((string)(this[this.tableNotice.FeeAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“FeeAccount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.FeeAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeeBankName {
                get {
                    try {
                        return ((string)(this[this.tableNotice.FeeBankNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“FeeBankName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.FeeBankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Content {
                get {
                    try {
                        return ((string)(this[this.tableNotice.ContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“Content”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.ContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesName {
                get {
                    try {
                        return ((string)(this[this.tableNotice.SalesNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Notice”中列“SalesName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNotice.SalesNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoticeNoNull() {
                return this.IsNull(this.tableNotice.NoticeNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoticeNoNull() {
                this[this.tableNotice.NoticeNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoticeDateNull() {
                return this.IsNull(this.tableNotice.NoticeDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoticeDateNull() {
                this[this.tableNotice.NoticeDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableNotice.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableNotice.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayFeeNull() {
                return this.IsNull(this.tableNotice.PayFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayFeeNull() {
                this[this.tableNotice.PayFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayFeeUpperNull() {
                return this.IsNull(this.tableNotice.PayFeeUpperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayFeeUpperNull() {
                this[this.tableNotice.PayFeeUpperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAciPremiumNull() {
                return this.IsNull(this.tableNotice.AciPremiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAciPremiumNull() {
                this[this.tableNotice.AciPremiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCstPremiumNull() {
                return this.IsNull(this.tableNotice.CstPremiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCstPremiumNull() {
                this[this.tableNotice.CstPremiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCiPremiumNull() {
                return this.IsNull(this.tableNotice.CiPremiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCiPremiumNull() {
                this[this.tableNotice.CiPremiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeCompanyNull() {
                return this.IsNull(this.tableNotice.FeeCompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeCompanyNull() {
                this[this.tableNotice.FeeCompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeAccountNull() {
                return this.IsNull(this.tableNotice.FeeAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeAccountNull() {
                this[this.tableNotice.FeeAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeBankNameNull() {
                return this.IsNull(this.tableNotice.FeeBankNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeBankNameNull() {
                this[this.tableNotice.FeeBankNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContentNull() {
                return this.IsNull(this.tableNotice.ContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContentNull() {
                this[this.tableNotice.ContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNameNull() {
                return this.IsNull(this.tableNotice.SalesNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNameNull() {
                this[this.tableNotice.SalesNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NoticePolicyRow : global::System.Data.DataRow {
            
            private NoticePolicyDataTable tableNoticePolicy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoticePolicyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNoticePolicy = ((NoticePolicyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProdTypeName {
                get {
                    try {
                        return ((string)(this[this.tableNoticePolicy.ProdTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NoticePolicy”中列“ProdTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNoticePolicy.ProdTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PolicyNo {
                get {
                    try {
                        return ((string)(this[this.tableNoticePolicy.PolicyNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NoticePolicy”中列“PolicyNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNoticePolicy.PolicyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PolicyID {
                get {
                    try {
                        return ((string)(this[this.tableNoticePolicy.PolicyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NoticePolicy”中列“PolicyID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNoticePolicy.PolicyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayFee {
                get {
                    try {
                        return ((string)(this[this.tableNoticePolicy.PayFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NoticePolicy”中列“PayFee”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNoticePolicy.PayFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoticeNo {
                get {
                    try {
                        return ((string)(this[this.tableNoticePolicy.NoticeNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NoticePolicy”中列“NoticeNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNoticePolicy.NoticeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarrierName {
                get {
                    try {
                        return ((string)(this[this.tableNoticePolicy.CarrierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NoticePolicy”中列“CarrierName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNoticePolicy.CarrierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchName {
                get {
                    try {
                        return ((string)(this[this.tableNoticePolicy.BranchNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NoticePolicy”中列“BranchName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNoticePolicy.BranchNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProdTypeNameNull() {
                return this.IsNull(this.tableNoticePolicy.ProdTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProdTypeNameNull() {
                this[this.tableNoticePolicy.ProdTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPolicyNoNull() {
                return this.IsNull(this.tableNoticePolicy.PolicyNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPolicyNoNull() {
                this[this.tableNoticePolicy.PolicyNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPolicyIDNull() {
                return this.IsNull(this.tableNoticePolicy.PolicyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPolicyIDNull() {
                this[this.tableNoticePolicy.PolicyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayFeeNull() {
                return this.IsNull(this.tableNoticePolicy.PayFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayFeeNull() {
                this[this.tableNoticePolicy.PayFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoticeNoNull() {
                return this.IsNull(this.tableNoticePolicy.NoticeNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoticeNoNull() {
                this[this.tableNoticePolicy.NoticeNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNameNull() {
                return this.IsNull(this.tableNoticePolicy.CarrierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNameNull() {
                this[this.tableNoticePolicy.CarrierNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchNameNull() {
                return this.IsNull(this.tableNoticePolicy.BranchNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchNameNull() {
                this[this.tableNoticePolicy.BranchNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NoticeRowChangeEvent : global::System.EventArgs {
            
            private NoticeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticeRowChangeEvent(NoticeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NoticePolicyRowChangeEvent : global::System.EventArgs {
            
            private NoticePolicyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticePolicyRowChangeEvent(NoticePolicyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoticePolicyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591